
// Custom scalar type for UUIDs.
scalar UUID

// Represents a User in the system.
table User {
  id: UUID! (primary_key);
  name: String!;
  email: String! (unique);
  role: String!;
  // A user can be a service provider.
  provider: ServiceProvider (references: [userId]);
}

// Represents a Service Provider.
table ServiceProvider {
  id: UUID! (primary_key);
  userId: UUID! (unique);
  name: String!;
  specialty: String!;
  avatarUrl: String!;
  dataAiHint: String;
  rating: Float!;
  reviewCount: Int!;
  isFeatured: Boolean;
  isFavourite: Boolean;
  bio: String!;
  location: String!;
  playlist: String!;
  // The user associated with this provider profile.
  user: User! (references: [userId]);
  // Services offered by this provider.
  services: [Service] (references: [id]);
  // Reviews received by this provider.
  reviews: [Review] (references: [providerId]);
}

// Represents a Service offered by a provider.
table Service {
  id: UUID! (primary_key);
  categoryId: UUID!;
  name: String!;
  description: String!;
  price: Float!;
  duration: Int!;
  // The category this service belongs to.
  category: ServiceCategory! (references: [categoryId]);
  // The providers who offer this service.
  provider: [ServiceProvider] (references: [id]);
}

// Represents a category for services.
table ServiceCategory {
  id: UUID! (primary_key);
  name: String! (unique);
  // The services within this category.
  services: [Service] (references: [categoryId]);
}

// Represents a review left by a user for a provider.
table Review {
  id: UUID! (primary_key);
  bookingId: UUID!;
  author: String!;
  avatarUrl: String;
  dataAiHint: String;
  rating: Int!;
  comment: String!;
  title: String;
  // The booking this review is for.
  booking: Booking! (references: [bookingId]);
  // The provider being reviewed.
  provider: ServiceProvider! (references: [id]);
}

// Represents a booking of a service.
table Booking {
  id: UUID! (primary_key);
  providerId: UUID!;
  providerName: String!;
  serviceIds: String[];
  date: Timestamp!;
  status: String!;
  clientName: String;
  isPaid: Boolean!;
  reviewId: String;
  // The provider for this booking.
  provider: ServiceProvider! (references: [providerId]);
}

// --- QUERIES and MUTATIONS ---

// Query to fetch all services, along with their providers.
query listServices(p: listServicesRequest!): listServicesResponse {
  "sql": "SELECT * FROM Service"
}

// Query to fetch all users
query listUsers(p: listUsersRequest!): listUsersResponse {
  "sql": "SELECT * FROM Users"
}

// Mutation to insert a new user
mutation insertUser(p: insertUserRequest!): insertUserResponse {
  "sql": "INSERT INTO Users (id, name, email, role) VALUES (p.id, p.name, p.email, p.role) RETURNING *"
}
