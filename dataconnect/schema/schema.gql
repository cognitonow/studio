
# Default schema file. You can use this file to define your data model,
# and Data Connect will generate the corresponding tables in your database.
#
# To learn more, visit https://firebase.google.com/docs/dataconnect

# Every Data Connect schema needs to have at least one query.
type Query {
  listServices: [Service]
  listServiceProviders: [ServiceProvider]
}

type Mutation {
    insertUser(id: String!, name: String!, email: String!, role: String!): User
}

# It's recommended to define each type in its own file.
# Learn more at https://firebase.google.com/docs/dataconnect/data-modeling#organizing-schema
type User {
  id: String! @id
  name: String!
  email: String! @unique
  role: String!
  provider: [ServiceProvider] @relation(on: "userId")
}

type ServiceProvider {
    id: String! @id
    userId: String!
    user: User @relation(references: ["userId"])
    name: String!
    specialty: String!
    avatarUrl: String!
    dataAiHint: String
    rating: Float!
    reviewCount: Int!
    isFeatured: Boolean
    isFavourite: Boolean
    bio: String!
    services: [Service] @relation(through: "ServiceProviderService")
    reviews: [Review] @relation(on: "providerId")
    location: String!
    playlist: String!
}

type Service {
    id: String! @id
    name: String!
    description: String!
    price: Float!
    duration: Int!
    categoryId: String!
    category: ServiceCategory @relation(references: ["categoryId"])
    provider: [ServiceProvider] @relation(through: "ServiceProviderService")
}

type ServiceCategory {
    id: String! @id
    name: String!
    services: [Service] @relation(on: "categoryId")
}

type Booking {
    id: String! @id
    providerId: String!
    providerName: String!
    serviceIds: [String!]!
    date: Timestamp!
    status: String!
    clientName: String
    isPaid: Boolean!
    reviewId: String
    review: Review @relation(references: ["reviewId"])
}
