type Query {
  listUsers(): [User]!
  listServiceProviders(): [ServiceProvider]!
  listServices(): [Service]!
  listBookings(): [Booking]!
}

type Mutation {
    insertUser(id: String!, name: String!, email: String!, role: String!): User!
}

type User {
  id: String!
  name: String
  email: String
  role: String
  provider: [ServiceProvider] @relation(name: "UserProvider")
}

type ServiceProvider {
  id: String!
  userId: String!
  name: String
  specialty: String
  avatarUrl: String
  dataAiHint: String
  rating: Float
  reviewCount: Int
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String
  location: String
  playlist: String
  user: User! @relation(name: "UserProvider")
  services: [Service] @relation(name: "ServiceProviderService")
  reviews: [Review] @relation(name: "ServiceProviderReview")
}

type Service {
    id: String!
    categoryId: String!
    name: String!
    description: String
    price: Int!
    duration: Int!
    provider: [ServiceProvider] @relation(name: "ServiceProviderService")
}

type Booking {
  id: String!
  providerId: String!
  providerName: String!
  serviceIds: [String]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

type Review {
    id: String!
    bookingId: String!
    author: String!
    avatarUrl: String
    dataAiHint: String
    rating: Int!
    comment: String!
    title: String
    provider: ServiceProvider! @relation(name: "ServiceProviderReview")
}

type ServiceCategory {
  id: String!
  name: String!
  services: [Service]! @relation(name: "ServiceCategoryService")
}
