# The base schema that defines all data types and foundational query/mutation types.

# Base Types for Queries and Mutations
# These will be extended by other schema files.
type Query {
  _version: String
}

type Mutation {
  _version: String
}

# Data Structures

type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  provider: [ServiceProvider!]! @manyToMany(joinTable: "UserServiceProvider")
}

type ServiceProvider {
  id: ID!
  userId: ID!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
  user: User! @oneToMany(field: "provider")
  services: [Service!]! @manyToMany(joinTable: "ServiceProviderService")
  reviews: [Review!]! @oneToMany(field: "provider")
}

type Service {
  id: ID!
  categoryId: ID!
  name: String!
  description: String!
  price: Float!
  duration: Int! # in minutes
  provider: [ServiceProvider!]! @manyToMany(joinTable: "ServiceProviderService")
}

type ServiceCategory {
  id: ID!
  name: String!
  services: [Service!]! @oneToMany(field: "category")
}

type Booking {
  id: ID!
  providerId: ID!
  providerName: String!
  serviceIds: [String!]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

type Review {
  id: ID!
  bookingId: ID!
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
}

type Conversation {
  id: ID!
  providerId: ID!
  clientId: String
  name: String!
  avatar: String!
  dataAiHint: String
  lastMessage: String!
  time: String!
  unread: Int!
}

type Message {
  id: ID!
  conversationId: ID!
  sender: String!
  text: String!
  isAi: Boolean
  bookingId: String
}
