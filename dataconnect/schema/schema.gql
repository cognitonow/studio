
type Booking {
  id: ID!
  providerId: ID!
  providerName: String!
  serviceIds: [String!]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

type Review {
  id: ID!
  bookingId: ID!
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
}

type ServiceCategory {
  id: ID!
  name: String!
  services: [Service!]! @relation
}

type ServiceProvider {
  id: ID!
  userId: ID!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
  user: User! @relation(references: ["userId"], on: "id")
  services: [Service!]! @relation(through: "ServiceProviderService")
  reviews: [Review!]! @relation(references: ["providerId"], on: "id")
}

type Service {
  id: ID!
  categoryId: ID!
  name: String!
  description: String!
  price: Float!
  duration: Int!
  provider: [ServiceProvider!]! @relation(through: "ServiceProviderService")
}

type User {
  id: ID!
  name: String!
  email: String! @unique
  role: String!
  provider: [ServiceProvider!]! @relation(references: ["id"], on: "userId")
}

type Conversation {
    id: ID!
    providerId: ID!
    clientId: String
    name: String!
    avatar: String!
    dataAiHint: String
    lastMessage: String!
    time: String!
    unread: Int!
}

type Message {
    id: ID!
    conversationId: ID!
    sender: String!
    text: String!
    isAi: Boolean
    bookingId: String
}

type Query {
  _version: String
}

type Mutation {
  _version: String
}
