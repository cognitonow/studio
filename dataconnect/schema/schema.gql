scalar Timestamp
scalar UUID

type User {
  id: UUID!
  name: String!
  email: String!
  role: String!
  provider: [ServiceProvider]
}

type ServiceProvider {
  id: UUID!
  userId: UUID!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
  user: User @relation(on: "userId")
  services: [Service] @relation(through: "ServiceProviderService")
  reviews: [Review]
}

type Service {
  id: UUID!
  categoryId: UUID!
  name: String!
  description: String!
  price: Float!
  duration: Int!
  provider: [ServiceProvider] @relation(through: "ServiceProviderService")
}

type ServiceCategory {
  id: UUID!
  name: String!
  services: [Service]
}

type Booking {
  id: UUID!
  providerId: UUID!
  providerName: String!
  serviceIds: [String]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

type Review {
  id: UUID!
  bookingId: UUID!
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
}

type ServiceProviderService {
  serviceProviderId: UUID!
  serviceProvider: ServiceProvider
  serviceId: UUID!
  service: Service
}

type Query {
  _version: String
  listUsers: [User]
  getUserById(id: ID!): User
  listServiceProviders: [ServiceProvider]
  getServiceProviderById(id: ID!): ServiceProvider
  listServices: [Service]
  getServiceById(id: ID!): Service
  listServiceCategories: [ServiceCategory]
  getServiceCategoryById(id: ID!): ServiceCategory
  listBookings: [Booking]
  getBookingById(id: ID!): Booking
  listReviews: [Review]
  getReviewById(id: ID!): Review
}

type Mutation {
  insertUser(id: UUID!, name: String!, email: String!, role: String!): User
}
