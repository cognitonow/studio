
type User {
  id: ID! @unique
  name: String!
  email: String! @unique
  role: String!
  provider: [ServiceProvider] @relation(name: "UserToServiceProvider")
}

type ServiceProvider {
  id: ID! @unique
  userId: ID!
  user: User! @relation(name: "UserToServiceProvider", field: "userId")
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
  services: [Service] @relation(name: "ServiceProviderToService")
  reviews: [Review] @relation(name: "ServiceProviderToReview")
}

type Service {
  id: ID! @unique
  categoryId: ID!
  category: ServiceCategory! @relation(name: "ServiceCategoryToService", field: "categoryId")
  name: String!
  description: String!
  price: Float!
  duration: Int!
  provider: [ServiceProvider] @relation(name: "ServiceProviderToService")
}

type ServiceCategory {
  id: ID! @unique
  name: String!
  services: [Service] @relation(name: "ServiceCategoryToService")
}

type Booking {
  id: ID! @unique
  providerId: ID!
  providerName: String!
  serviceIds: [String]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
  review: Review @relation(name: "BookingToReview", field: "reviewId")
}

type Review {
  id: ID! @unique
  bookingId: ID!
  booking: Booking! @relation(name: "BookingToReview", field: "bookingId")
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
  provider: ServiceProvider @relation(name: "ServiceProviderToReview", field: "providerId")
  providerId: ID
}

type Conversation {
  id: ID! @unique
  providerId: ID!
  clientId: String
  name: String!
  avatar: String!
  dataAiHint: String
  lastMessage: String!
  time: String!
  unread: Int!
  messages: [Message] @relation(name: "ConversationToMessage")
}

type Message {
  id: ID! @unique
  conversationId: ID!
  conversation: Conversation! @relation(name: "ConversationToMessage", field: "conversationId")
  sender: String!
  text: String!
  isAi: Boolean
  bookingId: String
}

type Query {
  _version: String
  listUsers: [User]
  getUserById(id: ID!): User
  listServiceProviders: [ServiceProvider]
  getServiceProviderById(id: ID!): ServiceProvider
  listServices: [Service]
  getServiceById(id: ID!): Service
  listServiceCategories: [ServiceCategory]
  getServiceCategoryById(id: ID!): ServiceCategory
  listBookings: [Booking]
  getBookingById(id: ID!): Booking
  listReviews: [Review]
  getReviewById(id: ID!): Review
  listConversations: [Conversation]
  getConversationById(id: ID!): Conversation
  listMessages: [Message]
  getMessagesByConversationId(conversationId: ID!): [Message]
}

type Mutation {
  insertUser(id: ID!, name: String!, email: String!, role: String!): User
  updateUser(id: ID!, name: String, email: String, role: String): User
  deleteUser(id: ID!): Boolean

  insertServiceProvider(userId: ID!, name: String!, specialty: String!, avatarUrl: String!, bio: String!, location: String!, playlist: String!): ServiceProvider
  updateServiceProvider(id: ID!, name: String, specialty: String, avatarUrl: String, bio: String, location: String, playlist: String): ServiceProvider
  deleteServiceProvider(id: ID!): Boolean

  insertService(categoryId: ID!, name: String!, description: String!, price: Float!, duration: Int!): Service
  updateService(id: ID!, name: String, description: String, price: Float, duration: Int): Service
  deleteService(id: ID!): Boolean
  
  insertBooking(providerId: ID!, providerName: String!, serviceIds: [String]!, date: Timestamp!, status: String!, clientName: String, isPaid: Boolean!): Booking
  updateBooking(id: ID!, status: String, date: Timestamp, isPaid: Boolean): Booking
  deleteBooking(id: ID!): Boolean
}
