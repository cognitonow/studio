
type ServiceProvider @table(key: "id") {
  id: String!
  userId: String!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
}

type Service @table(key: "id") {
  id: String!
  categoryId: String!
  name: String!
  description: String!
  price: Float!
  duration: Int!
}

type User @table(key: "id") {
    id: String!
    name: String!
    email: String!
    role: String!
}

type Booking @table(key: "id") {
    id: String!
    providerId: String!
    providerName: String!
    serviceIds: [String]!
    date: Timestamp!
    status: String!
    clientName: String
    isPaid: Boolean!
    reviewId: String
}

type Review @table(key: "id") {
    id: String!
    bookingId: String!
    author: String!
    avatarUrl: String
    dataAiHint: String
    rating: Int!
    comment: String!
    title: String
}

type ServiceCategory @table(key: "id") {
    id: String!
    name: String!
}

# The following types are not yet backed by database tables
# but are included for future use.

type Conversation {
  id: Int!
  providerId: String!
  clientId: String
  name: String!
  avatar: String!
  dataAiHint: String
  lastMessage: String!
  time: String!
  unread: Int!
}

type Message {
  id: Int!
  conversationId: Int!
  sender: String!
  text: String!
  isAi: Boolean
  bookingId: String
}

type Query {
  listServices: [Service] @auth(rules: [ { allow: all } ])
}

type Mutation {
    insertUser(id: String!, name: String!, email: String!, role: String!): User @auth(rules: [ { allow: all } ])
}
