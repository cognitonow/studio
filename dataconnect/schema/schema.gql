# Defines the root Query and Mutation types that Data Connect will extend.
# All other types for the application are also defined here.

type Query {}

type Mutation {}

# Represents a user of the application, who can be a client or a provider.
type User @table(key: "id") {
  id: String!
  name: String!
  email: String!
  role: String! # Corresponds to UserRole: 'client' or 'provider'
}

# Represents a service provider, such as a salon or stylist.
type ServiceProvider @table(key: "id") {
  id: String!
  userId: String!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  # portfolio: JSON # JSON type can be used for arrays of objects initially
  location: String!
  playlist: String
  # badges: JSON # JSON type for array of objects
}

# Represents a single service offered by a provider.
type Service @table(key: "id") {
  id: String!
  categoryId: String!
  name: String!
  description: String!
  price: Float!
  duration: Int! # in minutes
}

# Represents a review left by a client for a provider.
type Review @table(key: "id") {
  id: String!
  bookingId: String!
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
}

# Represents an appointment made by a client with a provider.
type Booking @table(key: "id") {
  id: String!
  providerId: String!
  # Storing providerName denormalizes data but simplifies client-side queries
  providerName: String!
  # serviceIds will be stored as an array of strings
  serviceIds: [String!]!
  date: Timestamp!
  status: String! # 'Pending', 'Confirmed', 'Completed', 'Cancelled'
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

# A category for grouping Service types (e.g., Hair, Nails).
type ServiceCategory @table(key: "id") {
  id: String!
  name: String!
}
