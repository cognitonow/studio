# Defines the base query and mutation types. All other schemas should extend these.
# Defines all the primary data structures for the application.

type Query {
  _placeholder: String
}

type Mutation {
  _placeholder: String
}

# Data Structures

type User @table(key: "id") {
  id: String!
  name: String!
  email: String!
  role: String!
  provider: [ServiceProvider!] @relation(through: "users_serviceProviders")
}

type ServiceProvider @table(key: "id") {
  id: String!
  userId: String!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
  user: User! @relation(on: "userId", to: "id")
  services: [Service!] @relation(through: "serviceProviders_services")
  reviews: [Review!]
}

type Service @table(key: "id") {
  id: String!
  categoryId: String!
  name: String!
  description: String!
  price: Float!
  duration: Int!
  provider: [ServiceProvider!] @relation(through: "serviceProviders_services")
}

type ServiceCategory @table(key: "id") {
  id: String!
  name: String!
  services: [Service!] @relation(on: "id", to: "categoryId")
}

type Booking @table(key: "id") {
  id: String!
  providerId: String!
  providerName: String!
  serviceIds: [String!]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

type Review @table(key: "id") {
  id: String!
  bookingId: String!
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
}

type Conversation @table(key: "id") {
  id: Int!
  providerId: String!
  clientId: String
  name: String!
  avatar: String!
  dataAiHint: String
  lastMessage: String!
  time: String!
  unread: Int!
}

type Message @table(key: "id") {
  id: Int!
  conversationId: Int!
  sender: String!
  text: String!
  isAi: Boolean
  bookingId: String
}
