# Describes the data model for the application.
# See https://firebase.google.com/docs/data-connect/reference/graphql/schema-language

type Query {
  listUsers: [User] @tables(User)
  user(id: ID!): User
  listServices: [Service] @tables(Service)
  listServiceProviders: [ServiceProvider] @tables(ServiceProvider)
}

type Mutation {
  insertUser(id: ID!, name: String!, email: String!, role: String!): User
}

type User @table(key: "id") {
  id: ID!
  name: String!
  email: String!
  role: String!
  provider: [ServiceProvider] @relation(on: "userId")
}

type ServiceProvider @table(key: "id") {
  id: ID!
  userId: ID!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
  user: User @relation(on: "userId")
  services: [Service] @relation
  reviews: [Review] @relation
}

type Service @table(key: "id") {
  id: ID!
  categoryId: ID!
  name: String!
  description: String!
  price: Int!
  duration: Int!
  provider: [ServiceProvider] @relation
}

type Booking @table(key: "id") {
  id: ID!
  providerId: ID!
  providerName: String!
  serviceIds: [String]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

type Review @table(key: "id") {
  id: ID!
  bookingId: ID!
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
}

type ServiceCategory @table(key: "id") {
  id: ID!
  name: String!
  services: [Service] @relation(on: "categoryId")
}
