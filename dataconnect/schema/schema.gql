
type Query {
  listUsers: [User] @auth(rules: [{ allow: public }])
  listServiceProviders: [ServiceProvider] @auth(rules: [{ allow: public }])
  listServices: listServicesResponse @auth(rules: [{ allow: public }])
}

type Mutation {
  insertUser(id: ID!, name: String!, email: String!, role: String!): insertUserResponse
    @auth(rules: [{ allow: public }])
}

type listServicesResponse {
  services: [Service]
}

type insertUserResponse {
  data: User
}

type User {
  id: ID!
  name: String
  email: String
  role: String
  provider: [ServiceProvider] @relation(name: "UserToServiceProvider")
}

type ServiceProvider {
  id: ID!
  userId: ID!
  name: String
  specialty: String
  avatarUrl: String
  dataAiHint: String
  rating: Float
  reviewCount: Int
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String
  location: String
  playlist: String
  user: User @relation(name: "UserToServiceProvider", field: "userId")
  services: [Service] @relation(name: "ServiceProviderToService")
  reviews: [Review] @relation(name: "ServiceProviderToReview")
}

type Service {
  id: ID!
  categoryId: ID!
  name: String
  description: String
  price: Float
  duration: Int
  provider: [ServiceProvider] @relation(name: "ServiceProviderToService")
}

type ServiceCategory {
  id: ID!
  name: String!
  services: [Service]! @relation(name: "ServiceCategoryToService")
}

type Booking {
  id: ID!
  providerId: ID!
  providerName: String!
  serviceIds: [String]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

type Review {
  id: ID!
  bookingId: ID!
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
}
