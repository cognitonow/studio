
type Query @requiresAuth {
  users: [User]
    @permission(expression: "auth.token.email.endsWith('@google.com')")
}

type Mutation @requiresAuth {
  _: Boolean
}

type User @table(name: "users") {
  id: String! @column(key: "id")
  name: String!
  email: String!
  role: String!
  provider: [ServiceProvider] @relation(on: "id", to: "userId")
}

type ServiceProvider @table(name: "service_providers") {
  id: String! @column(key: "id")
  userId: String!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
  user: User @relation(on: "userId", to: "id")
  services: [Service] @relation(on: "id", to: "providerId")
  reviews: [Review] @relation(on: "id", to: "providerId")
}

type Service @table(name: "services") {
  id: String! @column(key: "id")
  categoryId: String!
  name: String!
  description: String!
  price: Float!
  duration: Int!
  provider: [ServiceProvider] @relation(on: "id", to: "id")
}

type Booking @table(name: "bookings") {
  id: String! @column(key: "id")
  providerId: String!
  providerName: String!
  serviceIds: [String]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}
