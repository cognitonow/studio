// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Defines the data model for the application.

// Every table needs a primary key.
// Data Connect will create a primary key for you if you don't specify one.

// Users can be either clients or providers.
table User {
  id: String! @primaryKey
  name: String
  email: String
  role: String // 'client' or 'provider'
  // A user can be a service provider.
  provider: ServiceProvider @foreignKey(references: "userId")
}

// ServiceProviders are users who offer services.
table ServiceProvider {
  id: String! @primaryKey
  userId: String! // Foreign key to User table
  name: String
  specialty: String
  avatarUrl: String
  dataAiHint: String
  rating: Float
  reviewCount: Int
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String
  location: String
  playlist: String
  // A provider has one user profile.
  user: User @foreignKey(references: "userId")
  // A provider can have many services.
  services: [Service] @relation(on: "ServiceProviderToService")
  // A provider can have many reviews.
  reviews: [Review] @relation(on: "ServiceProviderToReview")
}

// Services are the offerings by providers.
table Service {
  id: String! @primaryKey
  categoryId: String
  name: String
  description: String
  price: Float
  duration: Int
  // A service can be offered by many providers.
  provider: [ServiceProvider] @relation(on: "ServiceProviderToService")
}

// Reviews are left by clients for providers.
table Review {
  id: String! @primaryKey
  bookingId: String!
  author: String
  avatarUrl: String
  dataAiHint: String
  rating: Int
  comment: String
  title: String
  // A review belongs to one service provider.
  serviceProvider: ServiceProvider @foreignKey(references: "id")
}

// Bookings are appointments made by clients.
table Booking {
  id: String! @primaryKey
  providerId: String!
  providerName: String
  serviceIds: [String]
  date: Timestamp
  status: String
  clientName: String
  isPaid: Boolean
  reviewId: String
}

// A join table for the many-to-many relationship between providers and services.
table ServiceProviderToService {
  providerId: String! @primaryKey
  serviceId: String! @primaryKey
}

// A join table for the one-to-many relationship between providers and reviews.
table ServiceProviderToReview {
  providerId: String! @primaryKey
  reviewId: String! @primaryKey
}

// Defines a query to list all services and their associated providers.
query listServices() {
  // This query will be accessible from the client-side SDK.
  // It fetches all services and includes the provider details for each service.
  services: Service[] {
    id,
    name,
    description,
    price,
    duration,
    provider: ServiceProvider[] {
      id,
      userId,
      name,
      specialty,
      avatarUrl,
      dataAiHint,
      rating,
      reviewCount,
      isFeatured,
      isFavourite,
      bio,
      location,
      playlist,
      user: User {
          id,
          name,
          email,
          role
      }
    }
  }
}

// Defines a query to list all users.
query listUsers() {
    users: User[] {
        id,
        name,
        email,
        role
    }
}

// Defines a mutation to insert a new user.
mutation insertUser(
    id: String!,
    name: String!,
    email: String!,
    role: String!
) {
    data: User @insert(table: "User", data: {
        id: id,
        name: name,
        email: email,
        role: role
    }) {
        id
    }
}
