type User {
  id: ID!
  name: String!
  email: String!
  role: String!
  provider: [ServiceProvider!]
}

type ServiceProvider {
  id: ID!
  userId: String!
  name: String!
  specialty: String!
  avatarUrl: String!
  dataAiHint: String
  rating: Float!
  reviewCount: Int!
  isFeatured: Boolean
  isFavourite: Boolean
  bio: String!
  location: String!
  playlist: String!
  user: User @field(at: "userId")
  services: [Service!]
  reviews: [Review!]
}

type Service {
  id: ID!
  categoryId: String!
  name: String!
  description: String!
  price: Float!
  duration: Int!
  provider: [ServiceProvider!]
}

type Review {
  id: ID!
  bookingId: String!
  author: String!
  avatarUrl: String
  dataAiHint: String
  rating: Int!
  comment: String!
  title: String
}

type Booking {
  id: ID!
  providerId: String!
  providerName: String!
  serviceIds: [String!]!
  date: Timestamp!
  status: String!
  clientName: String
  isPaid: Boolean!
  reviewId: String
}

type ServiceCategory {
  id: ID!
  name: String!
  services: [Service!]
}

type Conversation {
  id: ID!
  providerId: String!
  clientId: String
  name: String!
  avatar: String!
  dataAiHint: String
  lastMessage: String!
  time: String!
  unread: Int!
}

type Message {
  id: ID!
  conversationId: ID!
  sender: String!
  text: String!
  isAi: Boolean
  bookingId: String
}

# Response types for list operations
type listUsersResponse {
  users: [User!]
}

type listServiceProvidersResponse {
  serviceprovider: [ServiceProvider!]
}

type listServicesResponse {
  services: [Service!]
}

type listReviewsResponse {
  reviews: [Review!]
}

type listBookingsResponse {
  bookings: [Booking!]
}

type listServiceCategoriesResponse {
  servicecategories: [ServiceCategory!]
}

type listConversationsResponse {
  conversations: [Conversation!]
}

type listMessagesResponse {
  messages: [Message!]
}
