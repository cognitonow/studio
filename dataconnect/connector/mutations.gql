extend type Mutation {
  insertUser(id: ID!, name: String!, email: String!, role: String!): User @resolver(name: "users/insert")
  updateUser(id: ID!, name: String, email: String, role: String): User @resolver(name: "users/update")
  deleteUser(id: ID!): Boolean @resolver(name: "users/delete")

  insertServiceProvider(id: ID!, userId: String!, name: String!, specialty: String!, avatarUrl: String!, bio: String!, location: String!, playlist: String!): ServiceProvider @resolver(name: "serviceProviders/insert")
  updateServiceProvider(id: ID!, name: String, specialty: String, avatarUrl: String, bio: String, location: String, playlist: String): ServiceProvider @resolver(name: "serviceProviders/update")
  deleteServiceProvider(id: ID!): Boolean @resolver(name: "serviceProviders/delete")

  insertService(id: ID!, categoryId: String!, name: String!, description: String!, price: Float!, duration: Int!): Service @resolver(name: "services/insert")
  updateService(id: ID!, name: String, description: String, price: Float, duration: Int): Service @resolver(name: "services/update")
  deleteService(id: ID!): Boolean @resolver(name: "services/delete")

  insertReview(id: ID!, bookingId: String!, author: String!, rating: Int!, comment: String!): Review @resolver(name: "reviews/insert")
  updateReview(id: ID!, rating: Int, comment: String): Review @resolver(name: "reviews/update")
  deleteReview(id: ID!): Boolean @resolver(name: "reviews/delete")

  insertBooking(id: ID!, providerId: String!, serviceIds: [String!]!, date: Timestamp!, status: String!, isPaid: Boolean!): Booking @resolver(name: "bookings/insert")
  updateBooking(id: ID!, date: Timestamp, status: String, isPaid: Boolean): Booking @resolver(name: "bookings/update")
  deleteBooking(id: ID!): Boolean @resolver(name: "bookings/delete")
}
